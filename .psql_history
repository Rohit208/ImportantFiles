\d
\q
\q
\d
\l
\l
\d
\l
\l
\l
\q
alter user rohit with password '12345';
\q
\q
:Q
\q
create database "rohit-pams-authentication";
\q
create database "rohit-pams-authentication";
\q
create database "rohit-mdm1";
\l
drop cluster  ;
drop ;
drop database ;
drop database a*;
\q
\c rohit-pams-system
\l
\l
create database "rohit-pams-system";
create database "rohit-mdm1";
create database "rohit-mdm2";
\l
create database "rohit-alt0";
create database "rohit-alt1";
create database "rohit-alt2";
\q
\c rohit-mdm0
\c rohit-mdm1
select * from "ProcessAlerts";
select * from "ProcessAlerts";
\d "ProcessAlerts"
\df+ processalertsgroup
\d+ processalertsgroup
\d "ProcessAlerts"
select * from "ProcessAlerts";
\q
select * from "ProcessAlerts";
\rohit-mdm1
select * from "ProcessAlerts";
\c rohit-mdm1
select * from "ProcessAlerts";
\q
alter TABLE "UsageRateType" drop constraint "UtilityId_MappingCode_TaxationServiceType";
---ChargeType Schema changesDROP INDEX "Name_UtilityId_MappingCode";
CREATE UNIQUE INDEX "ChargeType_UtilityId_MappingCode_TaxationServiceType" ON "ChargeType" ("UtilityId", "MappingCode", "TaxationServiceType");
--UsageRateType Schema ChangesALTER TABLE "UsageRateType" DROP CONSTRAINT "RateName_UtilityId_MappingCode";
ALTER TABLE "UsageRateType" ADD CONSTRAINT "UtilityId_MappingCode_TaxationServiceType" UNIQUE("UtilityId","MappingCode","TaxationServiceType");
\q
\i sql/changes.sql 
\q
\d "ChargeType"
\d "ChargeType"
\d "ChargeType"
--UsageRateType Schema ChangesALTER TABLE "ChargeType" 
\d "UsageRate"
\d "UsageRateType"
\d "ChargeType"
select * from information_schema.table_constraints;
select * from information_schema.table_constraints ;
select * from information_schema.table_constraints where constraint_name = "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
select * from information_schema.table_constraints where constraint_name = "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
select * from information_schema.table_constraints ;
select * from information_schema.table_constraints where constraint_name = "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
select * from information_schema.table_constraints ;
select * from information_schema.table_constraints where constraint_name = 'ChargeType_UtilityId_Name_MappingCode_TaxationServiceType';
select * from information_schema.table_indexes where constraint_name = 'ChargeType_UtilityId_Name_MappingCode_TaxationServiceType';
select * from information_schema.table_index;
select * from information_schema;
select * from information_schema;
select * from information_schema.table_constraints where constraint_name = 'ChargeType_UtilityId_Name_MappingCode_TaxationServiceType';
DROP INDEX  "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
\d "ServicePointFlow";
\d "UtilityAsset";
\d "PendingMeterExchange";
DROP INDEX  "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
ALTER TABLE "UsageRateType" ADD CONSTRAINT "UtilityId_MappingCode_TaxationServiceType" UNIQUE("UtilityId","MappingCode","TaxationServiceType");
\i sql/changes.sql 
DROP INDEX  "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
ALTER TABLE "UsageRateType" ADD CONSTRAINT "UtilityId_MappingCode_TaxationServiceType" UNIQUE("UtilityId","MappingCode","TaxationServiceType");
\d "UtilityAsset"
drop INDEX "UtilityAsset_UtilityId_Type_ReferenceId_idx";
drop INDEX "UtilityAsset_UtilityId_Type_ReferenceId_idx";
DROP INDEX  "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
ALTER TABLE "UsageRateType" ADD CONSTRAINT "UtilityId_MappingCode_TaxationServiceType" UNIQUE("UtilityId","MappingCode","TaxationServiceType");
\i sql/changes.sql 
ALTER TABLE "UsageRateType" ADD CONSTRAINT "UtilityId_MappingCode_TaxationServiceType" UNIQUE("UtilityId","MappingCode","TaxationServiceType");
DROP INDEX  "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
DROP INDEX  "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
drop INDEX "UtilityAsset_UtilityId_Type_ReferenceId_idx";
\d "PendingMeterExchange";
\d "PendingMeterExchange";
select * from "Account";
select * from "Account" where "ReferenceId" = '05105007';
\q
drop INDEX "UtilityAsset_UtilityId_Type_ReferenceId_idx";
DROP INDEX  "ChargeType_UtilityId_Name_MappingCode_TaxationServiceType";
ALTER TABLE "UsageRateType" ADD CONSTRAINT "UtilityId_MappingCode_TaxationServiceType" UNIQUE("UtilityId","MappingCode","TaxationServiceType");
select * from "Account" where "ReferenceId" = '05105007';
select * from "Account" where "ReferenceId" = '05105007';
select * from "Account" where "ReferenceId" = '05105007';
\q
 WITH "LatestPayment" AS (            SELECT                "AccountId",                "Value",                "TransactionEpoch"            FROM "Transaction" "T"            JOIN "TransactionType" "TT" ON "T"."TransactionTypeId"="TT"."Id"            WHERE "AccountId" = 1            AND "TT"."Name" IN ('Payment','CISPayment')            ORDER BY "TransactionEpoch" DESC, "T"."Id" DESC LIMIT 1        ),        "PreDayBalance" AS (            SELECT                "LP"."AccountId",                "LP"."Value" AS "LatestPayment",                "LP"."TransactionEpoch" AS "PaymentEpoch",                COALESCE("APB"."PrepayBalance", 0) AS "PrepayBalance",                COALESCE("APB"."DayEpoch", 0) AS "DayEpoch",                EXTRACT(EPOCH FROM ((TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago' ) + '1 days'::INTERVAL)::TIMESTAMP AT TIME ZONE 'America/Chicago' )::INT AS "DayEndEpoch"            FROM "LatestPayment" "LP"            LEFT JOIN  "AccountPrepayBalance" "APB" ON "APB"."AccountId" = "LP"."AccountId"            -- Get the AccountPrepayBalance of Previous Day of Transaction DayEpoch            AND "APB"."DayEpoch" < EXTRACT(EPOCH FROM DATE(TO_TIMESTAMP("LP"."TransactionEpoch") AT TIME ZONE 'America/Chicago')::TIMESTAMP AT TIME ZONE 'America/Chicago')            ORDER BY "APB"."DayEpoch" DESC LIMIT 1        ),        "BalanceWithPayment" AS (            SELECT                "PDB"."AccountId",                ("PDB"."PrepayBalance" + COALESCE(SUM("Value"), 0) + COALESCE(SUM("Tax"), 0) + "PDB"."LatestPayment" ) AS "BalanceOnPayment",                (TO_CHAR(TO_TIMESTAMP("PaymentEpoch") AT TIME ZONE 'America/Chicago','MM-DD-YYYY')) AS "LastPaymentDate"            FROM  "PreDayBalance" "PDB"             LEFT JOIN  "Transaction" "T"            ON "PDB"."AccountId" = "T"."AccountId"             AND "T"."CreatedEpoch" BETWEEN COALESCE("PDB"."DayEndEpoch", 0) AND ("PDB"."PaymentEpoch" - 1)            GROUP BY "PDB"."AccountId", "PDB"."LatestPayment", "PDB"."PaymentEpoch", "PDB"."PrepayBalance"        ),        "Unpaid" AS (            SELECT                SUM("AmountOwed") AS "UnpaidBalance",                ARRAY_AGG("DebtRecoveryRate" ORDER BY "CreatedDate") AS "DebtRecoveryRate",                "AccountId"            FROM "AccountUnpaidBalance"            WHERE "UtilityId" = 1            AND "AccountId"   = 1            AND "CompletedDate" IS NULL            GROUP BY  "AccountId"        ),        "TileData" AS (            SELECT                COALESCE(ROUND("U"."UnpaidBalance"::NUMERIC, 2), 0)     AS "UnpaidBalance",                COALESCE("U"."DebtRecoveryRate"[1]::INT, 0)             AS "DebtRecoveryRate",                COALESCE(ROUND("AP"."Balance"::NUMERIC, 2), 0)          AS "CurrentBalance",                COALESCE(ROUND("BWP"."BalanceOnPayment"::NUMERIC, 2), 0) AS "BalanceOnPayment",                COALESCE("BWP"."LastPaymentDate", 'NA')                  AS "LastPaymentDate",                "AP"."AccountId"            FROM "AccountProgram" "AP"            LEFT JOIN "Unpaid" "U"                   ON "U"."AccountId" = "AP"."AccountId"            LEFT JOIN "BalanceWithPayment" "BWP"             ON "BWP"."AccountId"= "AP"."AccountId"            WHERE "AP"."AccountId" = 1        )        SELECT            "TL"."UnpaidBalance",            "TL"."DebtRecoveryRate",            "TL"."CurrentBalance",            "TL"."BalanceOnPayment",            "TL"."LastPaymentDate",            COALESCE("GA"."EstimatedDaysLeft", 0) AS "EstimatedDaysLeft"        FROM "TileData" "TL";
 WITH "LatestPayment" AS (            SELECT                "AccountId",                "Value",                "TransactionEpoch"            FROM "Transaction" "T"            JOIN "TransactionType" "TT" ON "T"."TransactionTypeId"="TT"."Id"            WHERE "AccountId" = 1            AND "TT"."Name" IN ('Payment','CISPayment')            ORDER BY "TransactionEpoch" DESC, "T"."Id" DESC LIMIT 1        ),        "PreDayBalance" AS (            SELECT                "LP"."AccountId",                "LP"."Value" AS "LatestPayment",                "LP"."TransactionEpoch" AS "PaymentEpoch",                COALESCE("APB"."PrepayBalance", 0) AS "PrepayBalance",                COALESCE("APB"."DayEpoch", 0) AS "DayEpoch",                EXTRACT(EPOCH FROM ((TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago' ) + '1 days'::INTERVAL)::TIMESTAMP AT TIME ZONE 'America/Chicago' )::INT AS "DayEndEpoch"            FROM "LatestPayment" "LP"            LEFT JOIN  "AccountPrepayBalance" "APB" ON "APB"."AccountId" = "LP"."AccountId"            -- Get the AccountPrepayBalance of Previous Day of Transaction DayEpoch            AND "APB"."DayEpoch" < EXTRACT(EPOCH FROM DATE(TO_TIMESTAMP("LP"."TransactionEpoch") AT TIME ZONE 'America/Chicago')::TIMESTAMP AT TIME ZONE 'America/Chicago')            ORDER BY "APB"."DayEpoch" DESC LIMIT 1        ),        "BalanceWithPayment" AS (            SELECT                "PDB"."AccountId",                ("PDB"."PrepayBalance" + COALESCE(SUM("Value"), 0) + COALESCE(SUM("Tax"), 0) + "PDB"."LatestPayment" ) AS "BalanceOnPayment",                (TO_CHAR(TO_TIMESTAMP("PaymentEpoch") AT TIME ZONE 'America/Chicago','MM-DD-YYYY')) AS "LastPaymentDate"            FROM  "PreDayBalance" "PDB"             LEFT JOIN  "Transaction" "T"            ON "PDB"."AccountId" = "T"."AccountId"             AND "T"."CreatedEpoch" BETWEEN COALESCE("PDB"."DayEndEpoch", 0) AND ("PDB"."PaymentEpoch" - 1)            GROUP BY "PDB"."AccountId", "PDB"."LatestPayment", "PDB"."PaymentEpoch", "PDB"."PrepayBalance"        ),        "Unpaid" AS (            SELECT                SUM("AmountOwed") AS "UnpaidBalance",                ARRAY_AGG("DebtRecoveryRate" ORDER BY "CreatedDate") AS "DebtRecoveryRate",                "AccountId"            FROM "AccountUnpaidBalance"            WHERE "UtilityId" = 1            AND "AccountId"   = 1            AND "CompletedDate" IS NULL            GROUP BY  "AccountId"        ),        "TileData" AS (            SELECT                COALESCE(ROUND("U"."UnpaidBalance"::NUMERIC, 2), 0)     AS "UnpaidBalance",                COALESCE("U"."DebtRecoveryRate"[1]::INT, 0)             AS "DebtRecoveryRate",                COALESCE(ROUND("AP"."Balance"::NUMERIC, 2), 0)          AS "CurrentBalance",                COALESCE(ROUND("BWP"."BalanceOnPayment"::NUMERIC, 2), 0) AS "BalanceOnPayment",                COALESCE("BWP"."LastPaymentDate", 'NA')                  AS "LastPaymentDate",                "AP"."AccountId"            FROM "AccountProgram" "AP"            LEFT JOIN "Unpaid" "U"                   ON "U"."AccountId" = "AP"."AccountId"            LEFT JOIN "BalanceWithPayment" "BWP"             ON "BWP"."AccountId"= "AP"."AccountId"            WHERE "AP"."AccountId" = 1        )        SELECT            "TL"."UnpaidBalance",            "TL"."DebtRecoveryRate",            "TL"."CurrentBalance",            "TL"."BalanceOnPayment",            "TL"."LastPaymentDate"            --COALESCE("GA"."EstimatedDaysLeft", 0) AS "EstimatedDaysLeft"        FROM "TileData" "TL"        --LEFT JOIN "GetAccountChargeData"( "TL"."AccountId", ?, "TL"."CurrentBalance" , 'TRUE', 'FALSE' ) "GA"  ON "TL"."AccountId" = ?;
\q
\d "TaxJurisdictionRate"
\c rohit-mdm0
select * from "V2Weather";
select * from "Weather";
delete from "Weather";
\qa
\q
\c rohit-mdm0
select * from "FileRegistry";
delete from * from "FileRegistry";
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
gs
\q
delete from "Weather";
select * from "FileRegistry";
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
select COUNT(*) from "Weather";
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
select COUNT(*) from "Weather";
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
select COUNT(*) from "Weather";
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
select COUNT(*) from "Weather";
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
select * from "FileRegistry";
select * from "FileRegistryQueue";
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
select COUNT(*) from "Weather";
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
select * from "FileRegistryQueue";
\q
            WITH acc_transactions(                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip"                                   FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"            )            SELECT  DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago'), "TransactionDate"            FROM acc_transactions "T"            LEFT JOIN "Weather" "W"  ON "T"."WeatherZip" = "W"."Zip"             WHERE              "DayEpoch"      BETWEEN 1557896400      AND 1559537999             ORDER BY "TransactionDate";
WITH acc_transactions(                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip"                FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"            )            SELECT  DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago'), "TransactionDate"            FROM acc_transactions "T"            LEFT JOIN "Weather" "W"  ON "T"."WeatherZip" = "W"."Zip"             WHERE              "DayEpoch"      BETWEEN 1557896400      AND 1559537999             ORDER BY "TransactionDate";
            WITH acc_transactions AS (                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip"                FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"            )            SELECT  DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago'), "TransactionDate"            FROM acc_transactions "T"            LEFT JOIN "Weather" "W"  ON "T"."WeatherZip" = "W"."Zip"             WHERE              "DayEpoch"      BETWEEN 1557896400      AND 1559537999             ORDER BY "TransactionDate";
            WITH acc_transactions AS (                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip"                FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"            )            SELECT  DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago'), "Date"            FROM acc_transactions "T"            LEFT JOIN "Weather" "W"  ON "T"."WeatherZip" = "W"."Zip"             WHERE              "DayEpoch"      BETWEEN 1557896400      AND 1559537999             ORDER BY "Date";
  WITH acc_transactions AS (                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip"                FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"            )            SELECT  DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago') AS "WeatherDate", "Date"            FROM acc_transactions "T"            LEFT JOIN "Weather" "W"  ON "T"."WeatherZip" = "W"."Zip"             WHERE              "DayEpoch"      BETWEEN 1557896400      AND 1559537999             ORDER BY "Date", DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago');
        WITH acc_transactions AS (                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip",                        COALESCE(SUM("Tax") * -1, 0)                            AS "Tax",                         ARRAY_CAT_AGG("BillingDataId")                          AS "BillingDataId",                         SUM("ElectricCharge"[1]) * -1                              AS "ElectricCharge",                        SUM("ElectricCharge"[2]) * -1                              AS "ElectricChargeTax",                        SUM("WaterCharge"[1]) * -1                                 AS "WaterCharge",                        SUM("WaterCharge"[2]) * -1                                 AS "WaterChargeTax",                        SUM("GasCharge"[1]) * -1                                   AS "GasCharge",                        SUM("GasCharge"[2]) * -1                                   AS "GasChargeTax",                        SUM("SewerCharge"[1]) * -1                                 AS "SewerCharge",                        SUM("SewerCharge"[2]) * -1                                 AS "SewerChargeTax",                        COALESCE(SUM("UsageCharge"[1]) * -1, 0)                    AS "UsageCharge",                        COALESCE(SUM("UsageCharge"[2]) * -1, 0)                    AS "UsageChargeTax",                        COALESCE(SUM("DailyCharge"[1]) * -1, 0)                    AS "DailyCharge",                        COALESCE(SUM("DailyCharge"[2]) * -1, 0)                    AS "DailyChargeTax",                        COALESCE(SUM("AdjustmentCharge") * -1, 0)               AS "AdjustmentCharge",                        COALESCE(SUM("AdjustmentCredit"), 0)                    AS "AdjustmentCredit",                        COALESCE(SUM("DisconnectCharge") * -1, 0)               AS "DisconnectCharge",                        COALESCE(SUM("UnpaidBalanceCharge") * -1, 0)            AS "UnpaidBalanceCharge",                        COALESCE(SUM("UnpaidBalanceCredit"), 0)                 AS "UnpaidBalanceCredit",                        COALESCE(SUM("Payment"), ROUND(0,2))                    AS "Payments"                FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"        ),         weather_filtered AS (                SELECT * , DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)                AND                "DayEpoch"      BETWEEN 1557896400      AND 1559537999        ),        acc_usage AS (                SELECT                         "AccountId",                         "Date",                         SUM("ElectricUsage") AS "ElectricUsage",                        SUM("WaterUsage")    AS "WaterUsage",                        SUM("GasUsage")      AS "GasUsage",                        MAX("ElectricUOM")   AS "ElectricUOM",                        MAX("WaterUOM")      AS "WaterUOM",                        MAX("GasUOM")        AS "GasUOM"                FROM (                        SELECT                                 "T"."AccountId",                                 "T"."Date",                                CASE WHEN "MT"."ServiceType" = 'Electric' THEN "C"."Value" END AS "ElectricUsage",                                  CASE WHEN "MT"."ServiceType" = 'Water'    THEN "C"."Value" END AS "WaterUsage",                                  CASE WHEN "MT"."ServiceType" = 'Gas'      THEN "C"."Value" END AS "GasUsage",                                  CASE WHEN "MT"."ServiceType" = 'Electric' THEN "RT"."UOM"  END AS "ElectricUOM",                                  CASE WHEN "MT"."ServiceType" = 'Water'    THEN "RT"."UOM"  END AS "WaterUOM",                                  CASE WHEN "MT"."ServiceType" = 'Gas'      THEN "RT"."UOM"  END AS "GasUOM"                          FROM acc_transactions "T"                         LEFT JOIN "BillingData" "BD" ON "BD"."Id" = ANY("T"."BillingDataId")                        JOIN "Consumption" "C"   ON "BD"."RegisterId"    = "C"."RegisterId"                         JOIN "Register" "R"      ON "C"."RegisterId"     = "R"."Id"                         JOIN "RegisterType" "RT" ON "R"."RegisterTypeId" = "RT"."Id"                        JOIN "UtilityAsset" "UA" ON "R"."MeterId"        = "UA"."Id"                        JOIN "MeterType" "MT"    ON "UA"."MeterTypeId"   = "MT"."Id"            ) AS SQ                GROUP BY "AccountId", "Date"        )        SELECT                 "T"."AccountId",                "T"."Date",                DATE(TO_TIMESTAMP("W"."DayEpoch") AT TIME ZONE 'America/Chicago') AS "WaetherDate"                COALESCE("W"."HighTemp", NULL)::SMALLINT,                 COALESCE("W"."LowTemp", NULL)::SMALLINT,                 "AU"."ElectricUOM",                "AU"."WaterUOM",                 "AU"."GasUOM",                ROUND("AU"."ElectricUsage"::NUMERIC),                ROUND("AU"."WaterUsage"::NUMERIC),                ROUND("AU"."GasUsage"::NUMERIC),                ROUND("T"."ElectricCharge"::NUMERIC, 2),                ROUND("T"."ElectricChargeTax"::NUMERIC, 2),                ROUND("T"."WaterCharge"::NUMERIC,2),                ROUND("T"."WaterChargeTax"::NUMERIC,2),                ROUND("T"."SewerCharge"::NUMERIC,2),                ROUND("T"."SewerChargeTax"::NUMERIC,2),                ROUND("T"."GasCharge"::NUMERIC,2),                ROUND("T"."GasChargeTax"::NUMERIC,2),                ROUND("T"."UsageCharge"::NUMERIC,2),                ROUND("T"."UsageChargeTax"::NUMERIC,2),                ROUND("T"."DailyCharge"::NUMERIC,2),                ROUND("T"."DailyChargeTax"::NUMERIC,2),                ROUND("T"."Payments"::NUMERIC,2),                ROUND("T"."Tax"::NUMERIC,2),                --ROUND(COALESCE("APB"."PrepayBalance", "GetAccountBalance"("T"."AccountId", "T"."Date", 'America/Chicago'::TEXT))::NUMERIC,2) AS "Balance",                ROUND(("T"."AdjustmentCredit" + "T"."UnpaidBalanceCredit")::NUMERIC, 2)                  AS "MiscCredits",                ROUND(("T"."UnpaidBalanceCharge" + "T"."AdjustmentCharge" + "T"."DailyCharge" + "T"."DisconnectCharge")::NUMERIC,2) AS "MiscCharges",                ROUND((("T"."UnpaidBalanceCharge" + "T"."AdjustmentCharge" + "T"."DailyCharge" + "T"."UsageCharge" + "T"."DisconnectCharge" +"T"."Tax") - ("T"."AdjustmentCredit" + "T"."UnpaidBalanceCredit"))::NUMERIC, 2) AS "DailyTotal"        FROM acc_transactions "T"        LEFT JOIN acc_usage "AU"                ON "T"."AccountId" = "AU"."AccountId"         AND "T"."Date" = "AU"."Date"        LEFT JOIN weather_filtered "W"  ON "T"."WeatherZip" = "W"."Zip" ;
        WITH acc_transactions AS (                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip",                        COALESCE(SUM("Tax") * -1, 0)                            AS "Tax",                         ARRAY_CAT_AGG("BillingDataId")                          AS "BillingDataId",                         SUM("ElectricCharge"[1]) * -1                              AS "ElectricCharge",                        SUM("ElectricCharge"[2]) * -1                              AS "ElectricChargeTax",                        SUM("WaterCharge"[1]) * -1                                 AS "WaterCharge",                        SUM("WaterCharge"[2]) * -1                                 AS "WaterChargeTax",                        SUM("GasCharge"[1]) * -1                                   AS "GasCharge",                        SUM("GasCharge"[2]) * -1                                   AS "GasChargeTax",                        SUM("SewerCharge"[1]) * -1                                 AS "SewerCharge",                        SUM("SewerCharge"[2]) * -1                                 AS "SewerChargeTax",                        COALESCE(SUM("UsageCharge"[1]) * -1, 0)                    AS "UsageCharge",                        COALESCE(SUM("UsageCharge"[2]) * -1, 0)                    AS "UsageChargeTax",                        COALESCE(SUM("DailyCharge"[1]) * -1, 0)                    AS "DailyCharge",                        COALESCE(SUM("DailyCharge"[2]) * -1, 0)                    AS "DailyChargeTax",                        COALESCE(SUM("AdjustmentCharge") * -1, 0)               AS "AdjustmentCharge",                        COALESCE(SUM("AdjustmentCredit"), 0)                    AS "AdjustmentCredit",                        COALESCE(SUM("DisconnectCharge") * -1, 0)               AS "DisconnectCharge",                        COALESCE(SUM("UnpaidBalanceCharge") * -1, 0)            AS "UnpaidBalanceCharge",                        COALESCE(SUM("UnpaidBalanceCredit"), 0)                 AS "UnpaidBalanceCredit",                        COALESCE(SUM("Payment"), ROUND(0,2))                    AS "Payments"                FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"        ),         weather_filtered AS (                SELECT * , DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)                AND                "DayEpoch"      BETWEEN 1557896400      AND 1559537999        ),        acc_usage AS (                SELECT                         "AccountId",                         "Date",                         SUM("ElectricUsage") AS "ElectricUsage",                        SUM("WaterUsage")    AS "WaterUsage",                        SUM("GasUsage")      AS "GasUsage",                        MAX("ElectricUOM")   AS "ElectricUOM",                        MAX("WaterUOM")      AS "WaterUOM",                        MAX("GasUOM")        AS "GasUOM"                FROM (                        SELECT                                 "T"."AccountId",                                 "T"."Date",                                CASE WHEN "MT"."ServiceType" = 'Electric' THEN "C"."Value" END AS "ElectricUsage",                                  CASE WHEN "MT"."ServiceType" = 'Water'    THEN "C"."Value" END AS "WaterUsage",                                  CASE WHEN "MT"."ServiceType" = 'Gas'      THEN "C"."Value" END AS "GasUsage",                                  CASE WHEN "MT"."ServiceType" = 'Electric' THEN "RT"."UOM"  END AS "ElectricUOM",                                  CASE WHEN "MT"."ServiceType" = 'Water'    THEN "RT"."UOM"  END AS "WaterUOM",                                  CASE WHEN "MT"."ServiceType" = 'Gas'      THEN "RT"."UOM"  END AS "GasUOM"                          FROM acc_transactions "T"                         LEFT JOIN "BillingData" "BD" ON "BD"."Id" = ANY("T"."BillingDataId")                        JOIN "Consumption" "C"   ON "BD"."RegisterId"    = "C"."RegisterId"                         JOIN "Register" "R"      ON "C"."RegisterId"     = "R"."Id"                         JOIN "RegisterType" "RT" ON "R"."RegisterTypeId" = "RT"."Id"                        JOIN "UtilityAsset" "UA" ON "R"."MeterId"        = "UA"."Id"                        JOIN "MeterType" "MT"    ON "UA"."MeterTypeId"   = "MT"."Id"            ) AS SQ                GROUP BY "AccountId", "Date"        )        SELECT                 "T"."AccountId",                "T"."Date",                DATE(TO_TIMESTAMP("W"."DayEpoch") AT TIME ZONE 'America/Chicago') AS "WaetherDate",                COALESCE("W"."HighTemp", NULL)::SMALLINT,                 COALESCE("W"."LowTemp", NULL)::SMALLINT,                 "AU"."ElectricUOM",                "AU"."WaterUOM",                 "AU"."GasUOM",                ROUND("AU"."ElectricUsage"::NUMERIC),                ROUND("AU"."WaterUsage"::NUMERIC),                ROUND("AU"."GasUsage"::NUMERIC),                ROUND("T"."ElectricCharge"::NUMERIC, 2),                ROUND("T"."ElectricChargeTax"::NUMERIC, 2),                ROUND("T"."WaterCharge"::NUMERIC,2),                ROUND("T"."WaterChargeTax"::NUMERIC,2),                ROUND("T"."SewerCharge"::NUMERIC,2),                ROUND("T"."SewerChargeTax"::NUMERIC,2),                ROUND("T"."GasCharge"::NUMERIC,2),                ROUND("T"."GasChargeTax"::NUMERIC,2),                ROUND("T"."UsageCharge"::NUMERIC,2),                ROUND("T"."UsageChargeTax"::NUMERIC,2),                ROUND("T"."DailyCharge"::NUMERIC,2),                ROUND("T"."DailyChargeTax"::NUMERIC,2),                ROUND("T"."Payments"::NUMERIC,2),                ROUND("T"."Tax"::NUMERIC,2),                --ROUND(COALESCE("APB"."PrepayBalance", "GetAccountBalance"("T"."AccountId", "T"."Date", 'America/Chicago'::TEXT))::NUMERIC,2) AS "Balance",                ROUND(("T"."AdjustmentCredit" + "T"."UnpaidBalanceCredit")::NUMERIC, 2)                  AS "MiscCredits",                ROUND(("T"."UnpaidBalanceCharge" + "T"."AdjustmentCharge" + "T"."DailyCharge" + "T"."DisconnectCharge")::NUMERIC,2) AS "MiscCharges",                ROUND((("T"."UnpaidBalanceCharge" + "T"."AdjustmentCharge" + "T"."DailyCharge" + "T"."UsageCharge" + "T"."DisconnectCharge" +"T"."Tax") - ("T"."AdjustmentCredit" + "T"."UnpaidBalanceCredit"))::NUMERIC, 2) AS "DailyTotal"        FROM acc_transactions "T"        LEFT JOIN acc_usage "AU"                ON "T"."AccountId" = "AU"."AccountId"         AND "T"."Date" = "AU"."Date"        LEFT JOIN weather_filtered "W"  ON "T"."WeatherZip" = "W"."Zip"         -- AND EXTRACT(EPOCH FROM "T"."Date") = "W"."DayEpoch";
        WITH acc_transactions AS (                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip",                        COALESCE(SUM("Tax") * -1, 0)                            AS "Tax",                         ARRAY_CAT_AGG("BillingDataId")                          AS "BillingDataId",                         SUM("ElectricCharge"[1]) * -1                              AS "ElectricCharge",                        SUM("ElectricCharge"[2]) * -1                              AS "ElectricChargeTax",                        SUM("WaterCharge"[1]) * -1                                 AS "WaterCharge",                        SUM("WaterCharge"[2]) * -1                                 AS "WaterChargeTax",                        SUM("GasCharge"[1]) * -1                                   AS "GasCharge",                        SUM("GasCharge"[2]) * -1                                   AS "GasChargeTax",                        SUM("SewerCharge"[1]) * -1                                 AS "SewerCharge",                        SUM("SewerCharge"[2]) * -1                                 AS "SewerChargeTax",                        COALESCE(SUM("UsageCharge"[1]) * -1, 0)                    AS "UsageCharge",                        COALESCE(SUM("UsageCharge"[2]) * -1, 0)                    AS "UsageChargeTax",                        COALESCE(SUM("DailyCharge"[1]) * -1, 0)                    AS "DailyCharge",                        COALESCE(SUM("DailyCharge"[2]) * -1, 0)                    AS "DailyChargeTax",                        COALESCE(SUM("AdjustmentCharge") * -1, 0)               AS "AdjustmentCharge",                        COALESCE(SUM("AdjustmentCredit"), 0)                    AS "AdjustmentCredit",                        COALESCE(SUM("DisconnectCharge") * -1, 0)               AS "DisconnectCharge",                        COALESCE(SUM("UnpaidBalanceCharge") * -1, 0)            AS "UnpaidBalanceCharge",                        COALESCE(SUM("UnpaidBalanceCredit"), 0)                 AS "UnpaidBalanceCredit",                        COALESCE(SUM("Payment"), ROUND(0,2))                    AS "Payments"                FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"        ),         weather_filtered AS (                SELECT * , DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)                AND                "DayEpoch"      BETWEEN 1557896400      AND 1559537999        ),        acc_usage AS (                SELECT                         "AccountId",                         "Date",                         SUM("ElectricUsage") AS "ElectricUsage",                        SUM("WaterUsage")    AS "WaterUsage",                        SUM("GasUsage")      AS "GasUsage",                        MAX("ElectricUOM")   AS "ElectricUOM",                        MAX("WaterUOM")      AS "WaterUOM",                        MAX("GasUOM")        AS "GasUOM"                FROM (                        SELECT                                 "T"."AccountId",                                 "T"."Date",                                CASE WHEN "MT"."ServiceType" = 'Electric' THEN "C"."Value" END AS "ElectricUsage",                                  CASE WHEN "MT"."ServiceType" = 'Water'    THEN "C"."Value" END AS "WaterUsage",                                  CASE WHEN "MT"."ServiceType" = 'Gas'      THEN "C"."Value" END AS "GasUsage",                                  CASE WHEN "MT"."ServiceType" = 'Electric' THEN "RT"."UOM"  END AS "ElectricUOM",                                  CASE WHEN "MT"."ServiceType" = 'Water'    THEN "RT"."UOM"  END AS "WaterUOM",                                  CASE WHEN "MT"."ServiceType" = 'Gas'      THEN "RT"."UOM"  END AS "GasUOM"                          FROM acc_transactions "T"                         LEFT JOIN "BillingData" "BD" ON "BD"."Id" = ANY("T"."BillingDataId")                        JOIN "Consumption" "C"   ON "BD"."RegisterId"    = "C"."RegisterId"                         JOIN "Register" "R"      ON "C"."RegisterId"     = "R"."Id"                         JOIN "RegisterType" "RT" ON "R"."RegisterTypeId" = "RT"."Id"                        JOIN "UtilityAsset" "UA" ON "R"."MeterId"        = "UA"."Id"                        JOIN "MeterType" "MT"    ON "UA"."MeterTypeId"   = "MT"."Id"            ) AS SQ                GROUP BY "AccountId", "Date"        )        SELECT                 "T"."AccountId",                "T"."Date",                DATE(TO_TIMESTAMP("W"."DayEpoch") AT TIME ZONE 'America/Chicago') AS "WaetherDate",                COALESCE("W"."HighTemp", NULL)::SMALLINT,                 COALESCE("W"."LowTemp", NULL)::SMALLINT,                 "AU"."ElectricUOM",                "AU"."WaterUOM",                 "AU"."GasUOM",                ROUND("AU"."ElectricUsage"::NUMERIC),                ROUND("AU"."WaterUsage"::NUMERIC),                ROUND("AU"."GasUsage"::NUMERIC),                ROUND("T"."ElectricCharge"::NUMERIC, 2),                ROUND("T"."ElectricChargeTax"::NUMERIC, 2),                ROUND("T"."WaterCharge"::NUMERIC,2),                ROUND("T"."WaterChargeTax"::NUMERIC,2),                ROUND("T"."SewerCharge"::NUMERIC,2),                ROUND("T"."SewerChargeTax"::NUMERIC,2),                ROUND("T"."GasCharge"::NUMERIC,2),                ROUND("T"."GasChargeTax"::NUMERIC,2),                ROUND("T"."UsageCharge"::NUMERIC,2),                ROUND("T"."UsageChargeTax"::NUMERIC,2),                ROUND("T"."DailyCharge"::NUMERIC,2),                ROUND("T"."DailyChargeTax"::NUMERIC,2),                ROUND("T"."Payments"::NUMERIC,2),                ROUND("T"."Tax"::NUMERIC,2),                --ROUND(COALESCE("APB"."PrepayBalance", "GetAccountBalance"("T"."AccountId", "T"."Date", 'America/Chicago'::TEXT))::NUMERIC,2) AS "Balance",                ROUND(("T"."AdjustmentCredit" + "T"."UnpaidBalanceCredit")::NUMERIC, 2)                  AS "MiscCredits",                ROUND(("T"."UnpaidBalanceCharge" + "T"."AdjustmentCharge" + "T"."DailyCharge" + "T"."DisconnectCharge")::NUMERIC,2) AS "MiscCharges",                ROUND((("T"."UnpaidBalanceCharge" + "T"."AdjustmentCharge" + "T"."DailyCharge" + "T"."UsageCharge" + "T"."DisconnectCharge" +"T"."Tax") - ("T"."AdjustmentCredit" + "T"."UnpaidBalanceCredit"))::NUMERIC, 2) AS "DailyTotal"        FROM acc_transactions "T"        LEFT JOIN acc_usage "AU"                ON "T"."AccountId" = "AU"."AccountId"         AND "T"."Date" = "AU"."Date"        LEFT JOIN weather_filtered "W"  ON "T"."WeatherZip" = "W"."Zip"         AND EXTRACT(EPOCH FROM "T"."Date") = "W"."DayEpoch";
        WITH acc_transactions AS (                SELECT                         "T"."AccountId"                                         AS "AccountId",                         "T"."TransactionDate"                                   AS "Date",                         "WeatherZip"                                            AS "WeatherZip",                        COALESCE(SUM("Tax") * -1, 0)                            AS "Tax",                         ARRAY_CAT_AGG("BillingDataId")                          AS "BillingDataId",                         SUM("ElectricCharge"[1]) * -1                              AS "ElectricCharge",                        SUM("ElectricCharge"[2]) * -1                              AS "ElectricChargeTax",                        SUM("WaterCharge"[1]) * -1                                 AS "WaterCharge",                        SUM("WaterCharge"[2]) * -1                                 AS "WaterChargeTax",                        SUM("GasCharge"[1]) * -1                                   AS "GasCharge",                        SUM("GasCharge"[2]) * -1                                   AS "GasChargeTax",                        SUM("SewerCharge"[1]) * -1                                 AS "SewerCharge",                        SUM("SewerCharge"[2]) * -1                                 AS "SewerChargeTax",                        COALESCE(SUM("UsageCharge"[1]) * -1, 0)                    AS "UsageCharge",                        COALESCE(SUM("UsageCharge"[2]) * -1, 0)                    AS "UsageChargeTax",                        COALESCE(SUM("DailyCharge"[1]) * -1, 0)                    AS "DailyCharge",                        COALESCE(SUM("DailyCharge"[2]) * -1, 0)                    AS "DailyChargeTax",                        COALESCE(SUM("AdjustmentCharge") * -1, 0)               AS "AdjustmentCharge",                        COALESCE(SUM("AdjustmentCredit"), 0)                    AS "AdjustmentCredit",                        COALESCE(SUM("DisconnectCharge") * -1, 0)               AS "DisconnectCharge",                        COALESCE(SUM("UnpaidBalanceCharge") * -1, 0)            AS "UnpaidBalanceCharge",                        COALESCE(SUM("UnpaidBalanceCredit"), 0)                 AS "UnpaidBalanceCredit",                        COALESCE(SUM("Payment"), ROUND(0,2))                    AS "Payments"                FROM (                        SELECT                                 "T"."AccountId"         AS "AccountId",                                 "T"."BillingDataId"     AS "BillingDataId",                                 "T"."Tax"               AS "Tax",                                 "AC"."WeatherZip"       AS "WeatherZip",                                DATE (TO_TIMESTAMP("T"."TransactionEpoch") AT TIME ZONE 'America/Chicago')  AS "TransactionDate",                                CASE WHEN "T"."Description" LIKE '%Electric Usage%' THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "ElectricCharge",                                CASE WHEN "T"."Description" LIKE '%Water Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "WaterCharge",                                CASE WHEN "T"."Description" LIKE '%Gas Usage%'      THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "GasCharge",                                CASE WHEN "T"."Description" LIKE '%Sewer Usage%'    THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "SewerCharge",                                CASE WHEN "TT"."Name" = 'UsageChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "UsageCharge",                                CASE WHEN "TT"."Name" = 'DailyChargeBilling'        THEN ARRAY["T"."Value", COALESCE("T"."Tax", 0)] END       AS "DailyCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCharge'          THEN "T"."Value" END       AS "AdjustmentCharge",                                CASE WHEN "TT"."Name" = 'DisconnectCharge'          THEN "T"."Value" END       AS "DisconnectCharge",                                CASE WHEN "TT"."Name" = 'AdjustmentCredit'          THEN "T"."Value" END       AS "AdjustmentCredit",                                CASE WHEN "TT"."Name" = 'UnpaidBalanceCharge'       THEN "T"."Value" END       AS "UnpaidBalanceCharge",                                CASE WHEN "TT"."Name" IN ('UnpaidBalanceCredit', 'BalanceApplied', 'DepositApplied') THEN "T"."Value" END       AS "UnpaidBalanceCredit",                                CASE WHEN "TT"."Name" IN ('Payment','CISPayment') THEN "T"."Value" END       AS "Payment"                        FROM "Transaction" "T"                        JOIN "Account" "AC" ON "T"."AccountId"  = "AC"."Id"                        JOIN "Utility" "U"  ON "AC"."UtilityId" = "U"."Id"                        JOIN "TransactionType" "TT" ON "T"."TransactionTypeId" = "TT"."Id"                        WHERE "T"."AccountId" = 25                        AND "TransactionEpoch" BETWEEN 1557982800 AND 1559537999                        ORDER BY "T"."Id"                ) AS "T"                GROUP BY "T"."AccountId", "T"."TransactionDate", "T"."WeatherZip"        ),         weather_filtered AS (                SELECT * , DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)                AND                "DayEpoch"      BETWEEN 1557896400      AND 1559537999        ),        acc_usage AS (                SELECT                         "AccountId",                         "Date",                         SUM("ElectricUsage") AS "ElectricUsage",                        SUM("WaterUsage")    AS "WaterUsage",                        SUM("GasUsage")      AS "GasUsage",                        MAX("ElectricUOM")   AS "ElectricUOM",                        MAX("WaterUOM")      AS "WaterUOM",                        MAX("GasUOM")        AS "GasUOM"                FROM (                        SELECT                                 "T"."AccountId",                                 "T"."Date",                                CASE WHEN "MT"."ServiceType" = 'Electric' THEN "C"."Value" END AS "ElectricUsage",                                  CASE WHEN "MT"."ServiceType" = 'Water'    THEN "C"."Value" END AS "WaterUsage",                                  CASE WHEN "MT"."ServiceType" = 'Gas'      THEN "C"."Value" END AS "GasUsage",                                  CASE WHEN "MT"."ServiceType" = 'Electric' THEN "RT"."UOM"  END AS "ElectricUOM",                                  CASE WHEN "MT"."ServiceType" = 'Water'    THEN "RT"."UOM"  END AS "WaterUOM",                                  CASE WHEN "MT"."ServiceType" = 'Gas'      THEN "RT"."UOM"  END AS "GasUOM"                          FROM acc_transactions "T"                         LEFT JOIN "BillingData" "BD" ON "BD"."Id" = ANY("T"."BillingDataId")                        JOIN "Consumption" "C"   ON "BD"."RegisterId"    = "C"."RegisterId"                         JOIN "Register" "R"      ON "C"."RegisterId"     = "R"."Id"                         JOIN "RegisterType" "RT" ON "R"."RegisterTypeId" = "RT"."Id"                        JOIN "UtilityAsset" "UA" ON "R"."MeterId"        = "UA"."Id"                        JOIN "MeterType" "MT"    ON "UA"."MeterTypeId"   = "MT"."Id"            ) AS SQ                GROUP BY "AccountId", "Date"        )        SELECT                 "T"."AccountId",                "T"."Date",                DATE(TO_TIMESTAMP("W"."DayEpoch") AT TIME ZONE 'America/Chicago') AS "WaetherDate",                COALESCE("W"."HighTemp", NULL)::SMALLINT,                 COALESCE("W"."LowTemp", NULL)::SMALLINT,                 "AU"."ElectricUOM",                "AU"."WaterUOM",                 "AU"."GasUOM",                ROUND("AU"."ElectricUsage"::NUMERIC),                ROUND("AU"."WaterUsage"::NUMERIC),                ROUND("AU"."GasUsage"::NUMERIC),                ROUND("T"."ElectricCharge"::NUMERIC, 2),                ROUND("T"."ElectricChargeTax"::NUMERIC, 2),                ROUND("T"."WaterCharge"::NUMERIC,2),                ROUND("T"."WaterChargeTax"::NUMERIC,2),                ROUND("T"."SewerCharge"::NUMERIC,2),                ROUND("T"."SewerChargeTax"::NUMERIC,2),                ROUND("T"."GasCharge"::NUMERIC,2),                ROUND("T"."GasChargeTax"::NUMERIC,2),                ROUND("T"."UsageCharge"::NUMERIC,2),                ROUND("T"."UsageChargeTax"::NUMERIC,2),                ROUND("T"."DailyCharge"::NUMERIC,2),                ROUND("T"."DailyChargeTax"::NUMERIC,2),                ROUND("T"."Payments"::NUMERIC,2),                ROUND("T"."Tax"::NUMERIC,2),                --ROUND(COALESCE("APB"."PrepayBalance", "GetAccountBalance"("T"."AccountId", "T"."Date", 'America/Chicago'::TEXT))::NUMERIC,2) AS "Balance",                ROUND(("T"."AdjustmentCredit" + "T"."UnpaidBalanceCredit")::NUMERIC, 2)                  AS "MiscCredits",                ROUND(("T"."UnpaidBalanceCharge" + "T"."AdjustmentCharge" + "T"."DailyCharge" + "T"."DisconnectCharge")::NUMERIC,2) AS "MiscCharges",                ROUND((("T"."UnpaidBalanceCharge" + "T"."AdjustmentCharge" + "T"."DailyCharge" + "T"."UsageCharge" + "T"."DisconnectCharge" +"T"."Tax") - ("T"."AdjustmentCredit" + "T"."UnpaidBalanceCredit"))::NUMERIC, 2) AS "DailyTotal"        FROM acc_transactions "T"        LEFT JOIN acc_usage "AU"                ON "T"."AccountId" = "AU"."AccountId"         AND "T"."Date" = "AU"."Date"        LEFT JOIN weather_filtered "W"  ON "T"."WeatherZip" = "W"."Zip"         AND "T"."Date" = DATE (TO_TIMESTAMP("W"."DayEpoch") AT TIME ZONE 'America/Chicago');
                    SELECT                                    COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)                AND "DayEpoch" BETWEEN 1557896400  AND 1559537999;
                    SELECT                                    COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)                AND "DayEpoch" BETWEEN 1557896400  AND 1559537999;
                    SELECT                                    COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25);
                    SELECT                                    COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25) ORDER by DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago');
select * from "Weather" ;
select * from "Weather" ;
                    SELECT                                    COA"Id",LESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25) ORDER by DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago');-
                    SELECT                                    COA"Id",LESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25) ORDER by DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago');-
                    SELECT                                    COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25) ORDER by DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago');
                    SELECT                                    COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25) ORDER by DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago');
                    SELECT                                    COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25) ORDER by DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago');
                     SELECT                                    COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25) ORDER by DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago');
 SELECT      "Id",                              COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25);
 SELECT      "Id",                              COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25);
  SELECT      "W"."Id",                              COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather"                 WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)                AND "DayEpoch" BETWEEN 1557896400  AND 1559537999;
     SELECT      "W"."Id",                              COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)                AND "DayEpoch" BETWEEN 1557896400  AND 1559537999;
     SELECT      "W"."Id",                              COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)      --          AND "DayEpoch" BETWEEN 1557896400  AND 1559537999;
select * from "Weather" ;
select * from "Weather" where "Id" = 4766399;
select *,DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago') from "Weather" where "Id" = 4766399;
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/05-FDW-SP-Functions/GetAccountTransactionHistory.SP.sql
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/05-FDW-SP-Functions/GetAccountTransactionHistory.SP.sql
  SELECT                 "M"."ReferenceId"               AS "MeterRef",                "AC"."Id"                               AS "AccountId",                "AC"."UtilityId",                "AC"."WeatherZip",                "SPF"."MeterId",                "SPF"."UsageRateTypeId",                "MT"."ServiceType",                CASE                WHEN "URT"."DeterminantSettings"::TEXT LIKE '%IntervalCalcTypeId%' AND "URT"."DeterminantSettings"::TEXT LIKE '%RegisterTypeId%' THEN                B'11'                WHEN "URT"."DeterminantSettings"::TEXT LIKE '%IntervalCalcTypeId%'      THEN                B'10'                ELSE                B'01'                END AS "RateDetBit"                FROM "Account" "AC"                JOIN "ServicePointFlow" "SPF"               ON "SPF"."AccountId"    = "AC"."Id"                 AND "SPF"."InactiveEpoch" IS NULL                LEFT JOIN "UsageRateType" "URT"             ON "URT"."Id"           = "SPF"."UsageRateTypeId"[1]                 JOIN "UtilityAsset" "M"                     ON "SPF"."MeterId"      = "M"."Id"                AND "M"."InactiveEpoch" IS NULL                JOIN "MeterType" "MT"                       ON "M"."MeterTypeId"    = "MT"."Id"                WHERE                 "MT"."ServiceType"      = 'Electric'    AND                "M"."ReferenceId"       = '103000'      AND                 "AC"."Id"                       = 25    AND                 "AC"."UtilityId"        = 13;
select * from "Weather" where "Id" = 4766399;
select *,DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago') from "Weather" where "Id" = 4766399;
  SELECT                 "M"."ReferenceId"               AS "MeterRef",                "AC"."Id"                               AS "AccountId",                "AC"."UtilityId",                "AC"."WeatherZip",                "SPF"."MeterId",                "SPF"."UsageRateTypeId",                "MT"."ServiceType",                CASE                WHEN "URT"."DeterminantSettings"::TEXT LIKE '%IntervalCalcTypeId%' AND "URT"."DeterminantSettings"::TEXT LIKE '%RegisterTypeId%' THEN                B'11'                WHEN "URT"."DeterminantSettings"::TEXT LIKE '%IntervalCalcTypeId%'      THEN                B'10'                ELSE                B'01'                END AS "RateDetBit"                FROM "Account" "AC"                JOIN "ServicePointFlow" "SPF"               ON "SPF"."AccountId"    = "AC"."Id"                 AND "SPF"."InactiveEpoch" IS NULL                LEFT JOIN "UsageRateType" "URT"             ON "URT"."Id"           = "SPF"."UsageRateTypeId"[1]                 JOIN "UtilityAsset" "M"                     ON "SPF"."MeterId"      = "M"."Id"                AND "M"."InactiveEpoch" IS NULL                JOIN "MeterType" "MT"                       ON "M"."MeterTypeId"    = "MT"."Id"                WHERE                 "MT"."ServiceType"      = 'Electric'    AND                "M"."ReferenceId"       = '103000'      AND                 "AC"."Id"                       = 25    AND                 "AC"."UtilityId"        = 13;
     SELECT      "W"."Id",                              COALESCE("W"."HighTemp", NULL)::SMALLINT,                         COALESCE("W"."LowTemp", NULL)::SMALLINT,                          DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago')                 FROM "Weather" "W"                WHERE "Zip" = (SELECT "WeatherZip" FROM "Account" WHERE "Id" = 25)      --          AND "DayEpoch" BETWEEN 1557896400  AND 1559537999;
select *,DATE (TO_TIMESTAMP("DayEpoch") AT TIME ZONE 'America/Chicago') from "Weather" where "Id" = 4766399;
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/05-FDW-SP-Functions/GetAccountTransactionHistory.SP.sql
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/05-FDW-SP-Functions/GetAccountTransactionHistory.SP.sql
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/05-FDW-SP-Functions/GetAccountUsageHistory.SP.sql 
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/05-FDW-SP-Functions/GetAccountUsageHistory.SP.sql 
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/05-FDW-SP-Functions/GetAccountTransactionHistory.SP.sql
\q
\q
select * from "FileRegistry";
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
delete from "FileRegistryQueue";
delete from "FileRegistr";
delete from "FileRegistr"y;
delete from "FileRegistr;";
delete from "FileRegistry";
delete from "FileRegistry";
delete from "FileRegistryQueue";
delete from "FileRegistryQueue";
delete from "FileRegistry";
\q
select * from "TransactionType";
\q
\c rohit-mdm1
SELECT * FROM "DashboardSettings" WHERE "UtilityId" = 1;
\c rohit-pams-system
SELECT * FROM "DashboardSettings" WHERE "UtilityId" = 1;
gs
\c rohit-pams-system
SELECT * FROM "DashboardSettings" WHERE "UtilityId" = 1;
SELECT * FROM "DashboardSettings" WHERE "UtilityId" = 1;
SELECT * FROM "DashboardSettings" WHERE "UtilityId" = 1;
\q
SELECT * FROM "DashboardSettings" WHERE "UtilityId" = 1;
select "GetRoleDetails"(1, NULL); 
\df GetRoleDetails
SELECT * FROM "DashboardSettings" WHERE "UtilityId" = 1;
\q
\c rohit-mdm2
select * from "Account";
select * from "Account";
\q
\i sql/changes.sql 
\q
\df "CalculateDailyChargeBilling"
drop FUNCTION "CalculateDailyChargeBilling" ( integer, bigint, text,integer);
\df "CalculateDailyChargeBilling"
\q
\i sql/MDM/Shard_M/03-SP-Functions/DiscoBannerData.SP.sql
select * from "Account" order by "Id" DESC ;
\q
select * from "FileRegistry";
select * from "FileRegistry";
\q
\q
\c rohit-mdm0
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
\q
delete from "FileRegistry";
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
\q
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
\q
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
delete from "FileRegistryQueue" ;
delete from "FileRegistryQueue" ;
delete from "FileRegistry";
delete from "FileRegistry";\q
\i sql/changes.sql 
\q
\i sql/MDM/Shard_M/04-Helper-Views/UsageRateReadTypes.MatView.sql
\q
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/ConsumptionCalculation.SP.sql
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/ConsumptionCalculation.SP.sql
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/ConsumptionCalculation.SP.sql
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/ConsumptionCalculation.SP.sql
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/*
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/*.sql
\q
\i sql/changes.sql 
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/ConsumptionCalculation.SP.sql
\q
\i sql/changes_shard_0.sql 
\q
WITH dates AS (                       SELECT date::DATE, EXTRACT (EPOCH FROM ( date + '23 hours 59 minutes 59 seconds'::INTERVAL)) AS "Epoch"                       FROM GENERATE_SERIES(?::date, ?::date, '1 day'::interval) date                   ), accounts AS (                       SELECT "AC"."Id", "AP"."ActivatedEpoch", "AP"."InactiveEpoch"                       FROM "Account" "AC"                       LEFT JOIN "AccountProgram" "AP" ON "AC"."Id" = "AP"."AccountId"                       WHERE "AC"."UtilityId" = ?                   )SELECT "D"."date" AS "Date", COUNT("AC"."Id") AS "Count"                   FROM dates "D"                   LEFT JOIN accounts "AC" ON ( "D"."Epoch" >= "AC"."ActivatedEpoch"                       AND ("AC"."InactiveEpoch" IS NULL OR "D"."Epoch" < "AC"."InactiveEpoch"))                   GROUP BY "D"."date"                   ORDER BY "D"."date";
WITH dates AS (                       SELECT date::DATE, EXTRACT (EPOCH FROM ( date + '23 hours 59 minutes 59 seconds'::INTERVAL)) AS "Epoch"                       FROM GENERATE_SERIES('07/01/2019'::date, '07/31/2019'::date, '1 day'::interval) date                   ), accounts AS (                       SELECT "AC"."Id", "AP"."ActivatedEpoch", "AP"."InactiveEpoch"                       FROM "Account" "AC"                       LEFT JOIN "AccountProgram" "AP" ON "AC"."Id" = "AP"."AccountId"                       WHERE "AC"."UtilityId" = ?                   )SELECT "D"."date" AS "Date", COUNT("AC"."Id") AS "Count"                   FROM dates "D"                   LEFT JOIN accounts "AC" ON ( "D"."Epoch" >= "AC"."ActivatedEpoch"                       AND ("AC"."InactiveEpoch" IS NULL OR "D"."Epoch" < "AC"."InactiveEpoch"))                   GROUP BY "D"."date"                   ORDER BY "D"."date";
WITH dates AS (                       SELECT date::DATE, EXTRACT (EPOCH FROM ( date + '23 hours 59 minutes 59 seconds'::INTERVAL)) AS "Epoch"                       FROM GENERATE_SERIES('07/01/2019'::date, '07/31/2019'::date, '1 day'::interval) date                   ), accounts AS (                       SELECT "AC"."Id", "AP"."ActivatedEpoch", "AP"."InactiveEpoch"                       FROM "Account" "AC"                       LEFT JOIN "AccountProgram" "AP" ON "AC"."Id" = "AP"."AccountId"                       WHERE "AC"."UtilityId" = 1                   )SELECT "D"."date" AS "Date", COUNT("AC"."Id") AS "Count"                   FROM dates "D"                   LEFT JOIN accounts "AC" ON ( "D"."Epoch" >= "AC"."ActivatedEpoch"                       AND ("AC"."InactiveEpoch" IS NULL OR "D"."Epoch" < "AC"."InactiveEpoch"))                   GROUP BY "D"."date"                   ORDER BY "D"."date";
WITH dates AS (                       SELECT date::DATE, EXTRACT (EPOCH FROM ( date + '23 hours 59 minutes 59 seconds'::INTERVAL)) AS "Epoch"                       FROM GENERATE_SERIES('07-01-2019'::date, '07-31-2019'::date, '1 day'::interval) date                   ), accounts AS (                       SELECT "AC"."Id", "AP"."ActivatedEpoch", "AP"."InactiveEpoch"                       FROM "Account" "AC"                       LEFT JOIN "AccountProgram" "AP" ON "AC"."Id" = "AP"."AccountId"                       WHERE "AC"."UtilityId" = 1                   )SELECT "D"."date" AS "Date", COUNT("AC"."Id") AS "Count"                   FROM dates "D"                   LEFT JOIN accounts "AC" ON ( "D"."Epoch" >= "AC"."ActivatedEpoch"                       AND ("AC"."InactiveEpoch" IS NULL OR "D"."Epoch" < "AC"."InactiveEpoch"))                   GROUP BY "D"."date"                   ORDER BY "D"."date";
WITH dates AS (                       SELECT date::DATE, EXTRACT (EPOCH FROM ( date + '23 hours 59 minutes 59 seconds'::INTERVAL)) AS "Epoch"                       FROM GENERATE_SERIES('2019-01-07'::date, '2019-31-07'::date, '1 day'::interval) date                   ), accounts AS (                       SELECT "AC"."Id", "AP"."ActivatedEpoch", "AP"."InactiveEpoch"                       FROM "Account" "AC"                       LEFT JOIN "AccountProgram" "AP" ON "AC"."Id" = "AP"."AccountId"                       WHERE "AC"."UtilityId" = 1                   )SELECT "D"."date" AS "Date", COUNT("AC"."Id") AS "Count"                   FROM dates "D"                   LEFT JOIN accounts "AC" ON ( "D"."Epoch" >= "AC"."ActivatedEpoch"                       AND ("AC"."InactiveEpoch" IS NULL OR "D"."Epoch" < "AC"."InactiveEpoch"))                   GROUP BY "D"."date"                   ORDER BY "D"."date";
WITH dates AS (                       SELECT date::DATE, EXTRACT (EPOCH FROM ( date + '23 hours 59 minutes 59 seconds'::INTERVAL)) AS "Epoch"                       FROM GENERATE_SERIES('2019-07-01'::date, '2019-07-31'::date, '1 day'::interval) date                   ), accounts AS (                       SELECT "AC"."Id", "AP"."ActivatedEpoch", "AP"."InactiveEpoch"                       FROM "Account" "AC"                       LEFT JOIN "AccountProgram" "AP" ON "AC"."Id" = "AP"."AccountId"                       WHERE "AC"."UtilityId" = 1                   )SELECT "D"."date" AS "Date", COUNT("AC"."Id") AS "Count"                   FROM dates "D"                   LEFT JOIN accounts "AC" ON ( "D"."Epoch" >= "AC"."ActivatedEpoch"                       AND ("AC"."InactiveEpoch" IS NULL OR "D"."Epoch" < "AC"."InactiveEpoch"))                   GROUP BY "D"."date"                   ORDER BY "D"."date";
WITH dates AS (                       SELECT date::DATE, EXTRACT (EPOCH FROM ( date + '23 hours 59 minutes 59 seconds'::INTERVAL)) AS "Epoch"                       FROM GENERATE_SERIES('2019-07-01'::date, '2019-07-31'::date, '1 day'::interval) date                   ), accounts AS (                       SELECT "AC"."Id", "AP"."ActivatedEpoch", "AP"."InactiveEpoch"                       FROM "Account" "AC"                       LEFT JOIN "AccountProgram" "AP" ON "AC"."Id" = "AP"."AccountId"                       WHERE "AC"."UtilityId" = 1                   )SELECT "D"."date" AS "Date", COUNT("AC"."Id") AS "Count"                   FROM dates "D"                   LEFT JOIN accounts "AC" ON ( "D"."Epoch" >= "AC"."ActivatedEpoch"                       AND ("AC"."InactiveEpoch" IS NULL OR "D"."Epoch" < "AC"."InactiveEpoch"))                   GROUP BY "D"."date"                   ORDER BY "D"."date";
WITH dates AS (                       SELECT date::DATE, EXTRACT (EPOCH FROM ( date + '23 hours 59 minutes 59 seconds'::INTERVAL)) AS "Epoch"                       FROM GENERATE_SERIES('2019-07-01'::date, '2019-07-31'::date, '1 day'::interval) date                   ), accounts AS (                       SELECT "AC"."Id", "AP"."ActivatedEpoch", "AP"."InactiveEpoch"                       FROM "Account" "AC"                       LEFT JOIN "AccountProgram" "AP" ON "AC"."Id" = "AP"."AccountId"                       WHERE "AC"."UtilityId" = 1                   )SELECT to_char("D"."date", 'MM/DD/YYYY') AS "Date", COUNT("AC"."Id") AS "Count"                   FROM dates "D"                   LEFT JOIN accounts "AC" ON ( "D"."Epoch" >= "AC"."ActivatedEpoch"                       AND ("AC"."InactiveEpoch" IS NULL OR "D"."Epoch" < "AC"."InactiveEpoch"))                   GROUP BY "D"."date"                   ORDER BY "D"."date";
\d f "GetAccountDashboardData"
\df "GetAccountDashboardData"
\i sql/
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/ConsumptionCalculation.SP.sql
\df "CalculateDailyChargeBilling"
DROP FUNCTION "CalculateDailyChargeBilling" ( integer, bigint, text,integer);
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/ConsumptionCalculation.SP.sql
\i /home/rohit/Projects/PAMS-MDM/sql/MDM/Shard_M/03-SP-Functions/ConsumptionCalcUsingEstimate.SP.sql 
\i sql/changes.sql 
\dt+ "UtilityAsset_UtilityId_Type_ReferenceId_idx"
\d "UtilityAsset_UtilityId_Type_ReferenceId_idx"
\c rohit-mdm2
\i sql/changes.sql 
\i sql/changes.sql 
select Count(*) from "Account";
select Count(*) from "UtilityAsset";
select Count(*) from "Register";
select Count(*) from "Interval";
select * from "Account" where "ReferenceId" = '33178006';
select * from "Account" where "ReferenceId" = '33178006';
\q
